// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.8.22'
    repositories {
        google()
        mavenCentral()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    def needReplaceLocal = true
    gradle.startParameter.taskNames.each {
        if (it.contains('uploadArchives')) {
            needReplaceLocal = false
        }
    }
    if (needReplaceLocal) {
        configurations.configureEach {
            resolutionStrategy {
                dependencySubstitution {
                    substitute module('com.github.penfeizhou.android.animation:frameanimation') using project(":frameanimation")
                    substitute module('com.github.penfeizhou.android.animation:apng') using project(":apng")
                    substitute module('com.github.penfeizhou.android.animation:awebp') using project(":awebp")
                    substitute module('com.github.penfeizhou.android.animation:gif') using project(":gif")
                    substitute module('com.github.penfeizhou.android.animation:glide-plugin') using project(":plugin_glide")
                }
            }
        }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

Properties properties = new Properties()
properties.load(project.rootProject.file('version.properties').newDataInputStream())

ext {
    Version = properties.version
}

tasks.register('publishFrameAnimation') {
    dependsOn 'frameanimation:uploadArchives'
    println "FrameAnimation published"
}

tasks.register('publishAPNG') {
    dependsOn publishFrameAnimation, 'apng:uploadArchives'
    println "APNG published"
}

tasks.register('publishAWebP') {
    dependsOn publishFrameAnimation, ':awebp:uploadArchives'
    println "AWebP published"
}

tasks.register('publishGif') {
    dependsOn publishFrameAnimation, ':gif:uploadArchives'
    println "Gif published"
}

tasks.register('publishAWebPEncoder') {
    dependsOn publishAWebP, publishGif, ':awebpencoder:uploadArchives'
    println "AwebP Encoder published"
}

tasks.register('publishGlidePlugin') {
    dependsOn publishAPNG, publishAWebP, publishGif, ':plugin_glide:uploadArchives'
    println "GlidePlugin published"
}

tasks.register('PublishAll') {
    dependsOn publishGlidePlugin, publishAWebPEncoder
    println "All published"
}
